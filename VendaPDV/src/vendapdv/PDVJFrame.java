/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package vendapdv;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author isabe
 */
public class PDVJFrame extends javax.swing.JFrame {

    /**
     * Creates new form PDVJFrame
     */
    private List<String> produtosSelecionados = new ArrayList<>();

    public PDVJFrame) {
        initComponents();
        carregarPessoa();
        carregarProduto();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
private void carregarClientes() {
        // Carregue os clientes da fonte de dados (pode ser um banco de dados).
        String[] clientes = {"Cliente 1", "Cliente 2", "Cliente 3"};
        clienteComboBox.setModel(new DefaultComboBoxModel<>(clientes));
    }

    private void carregarProdutos() {
        // Carregue os produtos da fonte de dados (pode ser um banco de dados).
        String[] produtos = {"Produto 1", "Produto 2", "Produto 3"};
        produtoComboBox.setModel(new DefaultComboBoxModel<>(produtos));
    }

    private double calcularTotal(List<String> produtos) {
        // Implemente a lógica para calcular o valor total da venda com base nos produtos.
        // Substitua esta implementação pelo cálculo real.
        double total = 0.0;
        for (String produto : produtos) {
            total += obterPrecoDoProduto(produto);
        }
        return total;
    }

    private double obterPrecoDoProduto(String produto) {
        // Consulte a fonte de dados real (por exemplo, um banco de dados) para obter o preço do produto.
        // Neste exemplo, retornaremos preços fictícios.
        switch (produto) {
            case "Produto 1":
                return 10.0;
            case "Produto 2":
                return 20.0;
            case "Produto 3":
                return 30.0;
            default:
                return 0.0;
        }
    }

    private void finalizarVendaActionPerformed(java.awt.event.ActionEvent evt) {
        String clienteSelecionado = clienteComboBox.getSelectedItem().toString();
        String formaPagamentoSelecionada = formaPagamentoComboBox.getSelectedItem().toString();

        if (produtosSelecionados.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Adicione produtos à venda primeiro.", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }

        double total = calcularTotal(produtosSelecionados);

        String horaDaVenda = java.time.LocalTime.now().toString();
        String nomeArquivo = clienteSelecionado + "_venda_" + horaDaVenda + ".txt";

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(nomeArquivo))) {
            writer.write("Cliente: " + clienteSelecionado + "\n");
            writer.write("Forma de Pagamento: " + formaPagamentoSelecionada + "\n");
            writer.write("Produtos Vendidos:\n");

            for (String produto : produtosSelecionados) {
                writer.write("- " + produto + "\n");
            }

            writer.write("Total: R$" + total);
        } catch (IOException e) {
            e.printStackTrace();
        }

        JOptionPane.showMessageDialog(this, "Venda finalizada com sucesso. Detalhes da venda foram salvos em " + nomeArquivo, "Sucesso", JOptionPane.INFORMATION_MESSAGE);

        // Limpar produtos selecionados
        produtosSelecionados.clear();

        // Atualizar a tabela de produtos vendidos
        ((DefaultTableModel) tabelaProdutosVendidos.getModel()).setRowCount(0);
    }

    private void adicionarProdutoActionPerformed(java.awt.event.ActionEvent evt) {
        String produtoSelecionado = produtoComboBox.getSelectedItem().toString();

        if (!produtoSelecionado.isEmpty()) {
            produtosSelecionados.add(produtoSelecionado);
            ((DefaultTableModel) tabelaProdutosVendidos.getModel()).addRow(new Object[]{produtoSelecionado});
        }
    }


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PDVJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PDVJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PDVJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PDVJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PDVJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
